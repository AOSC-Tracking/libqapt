/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i ../downloadprogress.h -c TransactionAdaptor -a transactionadapter.h:transactionadapter.cpp org.kubuntu.qaptworker2.transaction.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef TRANSACTIONADAPTER_H_1365106018
#define TRANSACTIONADAPTER_H_1365106018

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "../downloadprogress.h"
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.kubuntu.qaptworker2.transaction
 */
class TransactionAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kubuntu.qaptworker2.transaction")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kubuntu.qaptworker2.transaction\">\n"
"    <property access=\"read\" type=\"s\" name=\"transactionId\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"userId\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"role\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"status\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"error\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"locale\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"proxy\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"debconfPipe\"/>\n"
"    <property access=\"read\" type=\"a{sv}\" name=\"packages\">\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"isCancellable\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"isCancelled\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"exitStatus\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"isPaused\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"statusDetails\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"progress\"/>\n"
"    <property access=\"read\" type=\"(sistts)\" name=\"downloadProgress\">\n"
"      <annotation value=\"QApt::DownloadProgress\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"as\" name=\"untrustedPackages\"/>\n"
"    <property access=\"read\" type=\"t\" name=\"downloadSpeed\"/>\n"
"    <property access=\"read\" type=\"t\" name=\"downloadETA\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"filePath\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"errorDetails\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"frontendCaps\"/>\n"
"    <signal name=\"propertyChanged\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"role\"/>\n"
"      <arg direction=\"out\" type=\"v\" name=\"newValue\"/>\n"
"    </signal>\n"
"    <signal name=\"finished\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"exitStatus\"/>\n"
"    </signal>\n"
"    <signal name=\"mediumRequired\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"label\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"mountPoint\"/>\n"
"    </signal>\n"
"    <signal name=\"configFileConflict\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"currentPath\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"newPath\"/>\n"
"    </signal>\n"
"    <signal name=\"promptUntrusted\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"untrustedPackages\"/>\n"
"    </signal>\n"
"    <method name=\"setProperty\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"property\"/>\n"
"      <arg direction=\"in\" type=\"v\" name=\"value\"/>\n"
"    </method>\n"
"    <method name=\"run\"/>\n"
"    <method name=\"cancel\"/>\n"
"    <method name=\"provideMedium\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"medium\"/>\n"
"    </method>\n"
"    <method name=\"replyUntrustedPrompt\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"approved\"/>\n"
"    </method>\n"
"    <method name=\"resolveConfigFileConflict\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"currentPath\"/>\n"
"      <arg direction=\"in\" type=\"b\" name=\"replace\"/>\n"
"    </method>\n"
"    <method name=\"setFrontendCaps\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"caps\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    TransactionAdaptor(QObject *parent);
    virtual ~TransactionAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QString debconfPipe READ debconfPipe)
    QString debconfPipe() const;

    Q_PROPERTY(qulonglong downloadETA READ downloadETA)
    qulonglong downloadETA() const;

    Q_PROPERTY(QApt::DownloadProgress downloadProgress READ downloadProgress)
    QApt::DownloadProgress downloadProgress() const;

    Q_PROPERTY(qulonglong downloadSpeed READ downloadSpeed)
    qulonglong downloadSpeed() const;

    Q_PROPERTY(int error READ error)
    int error() const;

    Q_PROPERTY(QString errorDetails READ errorDetails)
    QString errorDetails() const;

    Q_PROPERTY(int exitStatus READ exitStatus)
    int exitStatus() const;

    Q_PROPERTY(QString filePath READ filePath)
    QString filePath() const;

    Q_PROPERTY(int frontendCaps READ frontendCaps)
    int frontendCaps() const;

    Q_PROPERTY(bool isCancellable READ isCancellable)
    bool isCancellable() const;

    Q_PROPERTY(bool isCancelled READ isCancelled)
    bool isCancelled() const;

    Q_PROPERTY(bool isPaused READ isPaused)
    bool isPaused() const;

    Q_PROPERTY(QString locale READ locale)
    QString locale() const;

    Q_PROPERTY(QVariantMap packages READ packages)
    QVariantMap packages() const;

    Q_PROPERTY(int progress READ progress)
    int progress() const;

    Q_PROPERTY(QString proxy READ proxy)
    QString proxy() const;

    Q_PROPERTY(int role READ role)
    int role() const;

    Q_PROPERTY(int status READ status)
    int status() const;

    Q_PROPERTY(QString statusDetails READ statusDetails)
    QString statusDetails() const;

    Q_PROPERTY(QString transactionId READ transactionId)
    QString transactionId() const;

    Q_PROPERTY(QStringList untrustedPackages READ untrustedPackages)
    QStringList untrustedPackages() const;

    Q_PROPERTY(int userId READ userId)
    int userId() const;

public Q_SLOTS: // METHODS
    void cancel();
    void provideMedium(const QString &medium);
    void replyUntrustedPrompt(bool approved);
    void resolveConfigFileConflict(const QString &currentPath, bool replace);
    void run();
    void setFrontendCaps(int caps);
    void setProperty(int property, const QDBusVariant &value);
Q_SIGNALS: // SIGNALS
    void configFileConflict(const QString &currentPath, const QString &newPath);
    void finished(int exitStatus);
    void mediumRequired(const QString &label, const QString &mountPoint);
    void promptUntrusted(const QStringList &untrustedPackages);
    void propertyChanged(int role, const QDBusVariant &newValue);
};

#endif
